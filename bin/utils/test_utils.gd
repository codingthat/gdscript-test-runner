const ERROR_MESSAGE = "Expected output was '{}', actual output was '{}'."

var file_utils: Object = null

# Set after each single test, if there were any issues
var error_message: String = ""


func run_tests(solution_script: Object, test_suite_script: Object) -> Array:
	"""
	Runs the given test suite agains the given solution script. Returns an Array
	representing the results of each test case, in the same order they are defined
	in the test suite. Each test result is a Dictionary containing 3 values:

	* `name`: the name of the test case (as defined in the test suite)
	* `status`: 'pass', 'fail', or 'error'
	* `message`: null if the test passed, otherwise it contains the details of the failure/error
	"""
	var test_cases = test_suite_script.TEST_CASES
	var test_results = []
	
	for test_case in test_cases:
		var test_name = test_case["test_name"]
		var method_name = test_case["method_name"]
		var args = test_case["args"]
		var expected = test_case["expected"]
		
		var output = get_method_output(solution_script, method_name, args)
		
		if output == null:
			test_results.append({
				"name": test_name,
				"status": "error",
				"message": error_message,
			})
		else:
			var passed = typeof(output) == typeof(expected) and output == expected
			var status = "pass" if passed else "fail"
			var message = null if passed else ERROR_MESSAGE.format([str(expected), str(output)], "{}")
			
			test_results.append({
				"name": test_name,
				"status": status,
				"message": message,
			})
	
	return test_results


func get_method_output(solution_script: Object, method_name: String, args: Array) -> Variant:
	"""
	Extracts a method from the given script and calls it with given args. Returns the output
	of the method call. If the method could not be called (either not found or not a callable)
	sets `error_message` and returns null.

	Note: `error_message` will also be set if the method itself returned null, which indicates
	a problem with the method execution (division by 0, calling non-existent functions etc.).
	In that case, `error_message` will include the error output generated by Godot Engine
	while executing the method (read from `/tmp/stderr`).
	"""
	if solution_script.get(method_name) == null:
		error_message = "Method \'%s\' was not found." % method_name
		return null
	
	var method = solution_script.get(method_name)
	if typeof(method) != TYPE_CALLABLE:
		error_message = "\'%s\' is not a callable." % method_name
		return null
	
	# There is an issue with passing args to `callv`, using `args.duplicate()` fixes it
	var output = method.callv(args.duplicate())
	
	if output == null:
		error_message = file_utils.get_error_message.call(method_name)
	
	return output
